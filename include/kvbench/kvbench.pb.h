// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvbench.proto

#ifndef PROTOBUF_INCLUDED_kvbench_2eproto
#define PROTOBUF_INCLUDED_kvbench_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_kvbench_2eproto 

namespace protobuf_kvbench_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_kvbench_2eproto
namespace kvbench {
class Stat;
class StatDefaultTypeInternal;
extern StatDefaultTypeInternal _Stat_default_instance_;
class Stats;
class StatsDefaultTypeInternal;
extern StatsDefaultTypeInternal _Stats_default_instance_;
}  // namespace kvbench
namespace google {
namespace protobuf {
template<> ::kvbench::Stat* Arena::CreateMaybeMessage<::kvbench::Stat>(Arena*);
template<> ::kvbench::Stats* Arena::CreateMaybeMessage<::kvbench::Stats>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace kvbench {

// ===================================================================

class Stat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kvbench.Stat) */ {
 public:
  Stat();
  virtual ~Stat();

  Stat(const Stat& from);

  inline Stat& operator=(const Stat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Stat(Stat&& from) noexcept
    : Stat() {
    *this = ::std::move(from);
  }

  inline Stat& operator=(Stat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Stat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stat* internal_default_instance() {
    return reinterpret_cast<const Stat*>(
               &_Stat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Stat* other);
  friend void swap(Stat& a, Stat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Stat* New() const final {
    return CreateMaybeMessage<Stat>(NULL);
  }

  Stat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Stat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Stat& from);
  void MergeFrom(const Stat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double latency = 5;
  int latency_size() const;
  void clear_latency();
  static const int kLatencyFieldNumber = 5;
  double latency(int index) const;
  void set_latency(int index, double value);
  void add_latency(double value);
  const ::google::protobuf::RepeatedField< double >&
      latency() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_latency();

  // double duration = 1;
  void clear_duration();
  static const int kDurationFieldNumber = 1;
  double duration() const;
  void set_duration(double value);

  // double average_latency = 2;
  void clear_average_latency();
  static const int kAverageLatencyFieldNumber = 2;
  double average_latency() const;
  void set_average_latency(double value);

  // double max_latency = 3;
  void clear_max_latency();
  static const int kMaxLatencyFieldNumber = 3;
  double max_latency() const;
  void set_max_latency(double value);

  // double throughput = 4;
  void clear_throughput();
  static const int kThroughputFieldNumber = 4;
  double throughput() const;
  void set_throughput(double value);

  // int32 failed = 6;
  void clear_failed();
  static const int kFailedFieldNumber = 6;
  ::google::protobuf::int32 failed() const;
  void set_failed(::google::protobuf::int32 value);

  // int32 total = 7;
  void clear_total();
  static const int kTotalFieldNumber = 7;
  ::google::protobuf::int32 total() const;
  void set_total(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:kvbench.Stat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > latency_;
  mutable int _latency_cached_byte_size_;
  double duration_;
  double average_latency_;
  double max_latency_;
  double throughput_;
  ::google::protobuf::int32 failed_;
  ::google::protobuf::int32 total_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kvbench_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Stats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kvbench.Stats) */ {
 public:
  Stats();
  virtual ~Stats();

  Stats(const Stats& from);

  inline Stats& operator=(const Stats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Stats(Stats&& from) noexcept
    : Stats() {
    *this = ::std::move(from);
  }

  inline Stats& operator=(Stats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Stats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stats* internal_default_instance() {
    return reinterpret_cast<const Stats*>(
               &_Stats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Stats* other);
  friend void swap(Stats& a, Stats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Stats* New() const final {
    return CreateMaybeMessage<Stats>(NULL);
  }

  Stats* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Stats>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Stats& from);
  void MergeFrom(const Stats& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .kvbench.Stat stat = 1;
  int stat_size() const;
  void clear_stat();
  static const int kStatFieldNumber = 1;
  ::kvbench::Stat* mutable_stat(int index);
  ::google::protobuf::RepeatedPtrField< ::kvbench::Stat >*
      mutable_stat();
  const ::kvbench::Stat& stat(int index) const;
  ::kvbench::Stat* add_stat();
  const ::google::protobuf::RepeatedPtrField< ::kvbench::Stat >&
      stat() const;

  // @@protoc_insertion_point(class_scope:kvbench.Stats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::kvbench::Stat > stat_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kvbench_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Stat

// double duration = 1;
inline void Stat::clear_duration() {
  duration_ = 0;
}
inline double Stat::duration() const {
  // @@protoc_insertion_point(field_get:kvbench.Stat.duration)
  return duration_;
}
inline void Stat::set_duration(double value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:kvbench.Stat.duration)
}

// double average_latency = 2;
inline void Stat::clear_average_latency() {
  average_latency_ = 0;
}
inline double Stat::average_latency() const {
  // @@protoc_insertion_point(field_get:kvbench.Stat.average_latency)
  return average_latency_;
}
inline void Stat::set_average_latency(double value) {
  
  average_latency_ = value;
  // @@protoc_insertion_point(field_set:kvbench.Stat.average_latency)
}

// double max_latency = 3;
inline void Stat::clear_max_latency() {
  max_latency_ = 0;
}
inline double Stat::max_latency() const {
  // @@protoc_insertion_point(field_get:kvbench.Stat.max_latency)
  return max_latency_;
}
inline void Stat::set_max_latency(double value) {
  
  max_latency_ = value;
  // @@protoc_insertion_point(field_set:kvbench.Stat.max_latency)
}

// double throughput = 4;
inline void Stat::clear_throughput() {
  throughput_ = 0;
}
inline double Stat::throughput() const {
  // @@protoc_insertion_point(field_get:kvbench.Stat.throughput)
  return throughput_;
}
inline void Stat::set_throughput(double value) {
  
  throughput_ = value;
  // @@protoc_insertion_point(field_set:kvbench.Stat.throughput)
}

// repeated double latency = 5;
inline int Stat::latency_size() const {
  return latency_.size();
}
inline void Stat::clear_latency() {
  latency_.Clear();
}
inline double Stat::latency(int index) const {
  // @@protoc_insertion_point(field_get:kvbench.Stat.latency)
  return latency_.Get(index);
}
inline void Stat::set_latency(int index, double value) {
  latency_.Set(index, value);
  // @@protoc_insertion_point(field_set:kvbench.Stat.latency)
}
inline void Stat::add_latency(double value) {
  latency_.Add(value);
  // @@protoc_insertion_point(field_add:kvbench.Stat.latency)
}
inline const ::google::protobuf::RepeatedField< double >&
Stat::latency() const {
  // @@protoc_insertion_point(field_list:kvbench.Stat.latency)
  return latency_;
}
inline ::google::protobuf::RepeatedField< double >*
Stat::mutable_latency() {
  // @@protoc_insertion_point(field_mutable_list:kvbench.Stat.latency)
  return &latency_;
}

// int32 failed = 6;
inline void Stat::clear_failed() {
  failed_ = 0;
}
inline ::google::protobuf::int32 Stat::failed() const {
  // @@protoc_insertion_point(field_get:kvbench.Stat.failed)
  return failed_;
}
inline void Stat::set_failed(::google::protobuf::int32 value) {
  
  failed_ = value;
  // @@protoc_insertion_point(field_set:kvbench.Stat.failed)
}

// int32 total = 7;
inline void Stat::clear_total() {
  total_ = 0;
}
inline ::google::protobuf::int32 Stat::total() const {
  // @@protoc_insertion_point(field_get:kvbench.Stat.total)
  return total_;
}
inline void Stat::set_total(::google::protobuf::int32 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:kvbench.Stat.total)
}

// -------------------------------------------------------------------

// Stats

// repeated .kvbench.Stat stat = 1;
inline int Stats::stat_size() const {
  return stat_.size();
}
inline void Stats::clear_stat() {
  stat_.Clear();
}
inline ::kvbench::Stat* Stats::mutable_stat(int index) {
  // @@protoc_insertion_point(field_mutable:kvbench.Stats.stat)
  return stat_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::kvbench::Stat >*
Stats::mutable_stat() {
  // @@protoc_insertion_point(field_mutable_list:kvbench.Stats.stat)
  return &stat_;
}
inline const ::kvbench::Stat& Stats::stat(int index) const {
  // @@protoc_insertion_point(field_get:kvbench.Stats.stat)
  return stat_.Get(index);
}
inline ::kvbench::Stat* Stats::add_stat() {
  // @@protoc_insertion_point(field_add:kvbench.Stats.stat)
  return stat_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::kvbench::Stat >&
Stats::stat() const {
  // @@protoc_insertion_point(field_list:kvbench.Stats.stat)
  return stat_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kvbench

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_kvbench_2eproto
